//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `GotoPoint.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __GotoPoint_h__
#define __GotoPoint_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompGotoPoint
{

class GotoPoint;
class GotoPointPrx;

}

namespace RoboCompGotoPoint
{

class GotoPoint : public virtual ::Ice::Object
{
public:

    using ProxyType = GotoPointPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void go(::std::string nodo, float x, float y, float alpha, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_go(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void turn(float speed, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_turn(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stop(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool atTarget(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_atTarget(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompGotoPoint
{

class GotoPointPrx : public virtual ::Ice::Proxy<GotoPointPrx, ::Ice::ObjectPrx>
{
public:

    void go(const ::std::string& nodo, float x, float y, float alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GotoPointPrx::_iceI_go, nodo, x, y, alpha, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto goAsync(const ::std::string& nodo, float x, float y, float alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GotoPointPrx::_iceI_go, nodo, x, y, alpha, context);
    }

    ::std::function<void()>
    goAsync(const ::std::string& nodo, float x, float y, float alpha,
            ::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_go, nodo, x, y, alpha, context);
    }

    /// \cond INTERNAL
    void _iceI_go(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, float, float, float, const ::Ice::Context&);
    /// \endcond

    void turn(float speed, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GotoPointPrx::_iceI_turn, speed, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto turnAsync(float speed, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GotoPointPrx::_iceI_turn, speed, context);
    }

    ::std::function<void()>
    turnAsync(float speed,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_turn, speed, context);
    }

    /// \cond INTERNAL
    void _iceI_turn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GotoPointPrx::_iceI_stop, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GotoPointPrx::_iceI_stop, context);
    }

    ::std::function<void()>
    stopAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_stop, context);
    }

    /// \cond INTERNAL
    void _iceI_stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    bool atTarget(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &GotoPointPrx::_iceI_atTarget, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto atTargetAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &GotoPointPrx::_iceI_atTarget, context);
    }

    ::std::function<void()>
    atTargetAsync(::std::function<void(bool)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_atTarget, context);
    }

    /// \cond INTERNAL
    void _iceI_atTarget(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    GotoPointPrx() = default;
    friend ::std::shared_ptr<GotoPointPrx> IceInternal::createProxy<GotoPointPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompGotoPoint
{

using GotoPointPtr = ::std::shared_ptr<GotoPoint>;
using GotoPointPrxPtr = ::std::shared_ptr<GotoPointPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompGotoPoint
{

class GotoPoint;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< GotoPoint>&);
::IceProxy::Ice::Object* upCast(GotoPoint*);
/// \endcond

}

}

namespace RoboCompGotoPoint
{

class GotoPoint;
/// \cond INTERNAL
::Ice::Object* upCast(GotoPoint*);
/// \endcond
typedef ::IceInternal::Handle< GotoPoint> GotoPointPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGotoPoint::GotoPoint> GotoPointPrx;
typedef GotoPointPrx GotoPointPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(GotoPointPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompGotoPoint
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_go.
 */
class Callback_GotoPoint_go_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_go_Base> Callback_GotoPoint_goPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_turn.
 */
class Callback_GotoPoint_turn_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_turn_Base> Callback_GotoPoint_turnPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_stop.
 */
class Callback_GotoPoint_stop_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_stop_Base> Callback_GotoPoint_stopPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_atTarget.
 */
class Callback_GotoPoint_atTarget_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_atTarget_Base> Callback_GotoPoint_atTargetPtr;

}

namespace IceProxy
{

namespace RoboCompGotoPoint
{

class GotoPoint : public virtual ::Ice::Proxy<GotoPoint, ::IceProxy::Ice::Object>
{
public:

    void go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_go(_iceI_begin_go(nodo, x, y, alpha, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_go(nodo, x, y, alpha, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(nodo, x, y, alpha, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(nodo, x, y, alpha, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::RoboCompGotoPoint::Callback_GotoPoint_goPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(nodo, x, y, alpha, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_goPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(nodo, x, y, alpha, context, cb, cookie);
    }

    void end_go(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_go(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void turn(::Ice::Float speed, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_turn(_iceI_begin_turn(speed, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float speed, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_turn(speed, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float speed, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(speed, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float speed, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(speed, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float speed, const ::RoboCompGotoPoint::Callback_GotoPoint_turnPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(speed, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float speed, const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_turnPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(speed, context, cb, cookie);
    }

    void end_turn(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_turn(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stop(_iceI_begin_stop(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stop(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::RoboCompGotoPoint::Callback_GotoPoint_stopPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_stopPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(context, cb, cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stop(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool atTarget(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_atTarget(_iceI_begin_atTarget(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_atTarget(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::RoboCompGotoPoint::Callback_GotoPoint_atTargetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_atTargetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(context, cb, cookie);
    }

    bool end_atTarget(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_atTarget(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompGotoPoint
{

class GotoPoint : public virtual ::Ice::Object
{
public:

    typedef GotoPointPrx ProxyType;
    typedef GotoPointPtr PointerType;

    virtual ~GotoPoint();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void go(const ::std::string& nodo, ::Ice::Float x, ::Ice::Float y, ::Ice::Float alpha, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_go(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void turn(::Ice::Float speed, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_turn(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stop(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool atTarget(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_atTarget(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const GotoPoint& lhs, const GotoPoint& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GotoPoint& lhs, const GotoPoint& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace RoboCompGotoPoint
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_go.
 */
template<class T>
class CallbackNC_GotoPoint_go : public Callback_GotoPoint_go_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GotoPoint_go(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_go.
 */
template<class T, typename CT>
class Callback_GotoPoint_go : public Callback_GotoPoint_go_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GotoPoint_go(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_go.
 */
template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_turn.
 */
template<class T>
class CallbackNC_GotoPoint_turn : public Callback_GotoPoint_turn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GotoPoint_turn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_turn.
 */
template<class T, typename CT>
class Callback_GotoPoint_turn : public Callback_GotoPoint_turn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GotoPoint_turn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_turn.
 */
template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_stop.
 */
template<class T>
class CallbackNC_GotoPoint_stop : public Callback_GotoPoint_stop_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GotoPoint_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_stop.
 */
template<class T, typename CT>
class Callback_GotoPoint_stop : public Callback_GotoPoint_stop_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GotoPoint_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_stop.
 */
template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_atTarget.
 */
template<class T>
class CallbackNC_GotoPoint_atTarget : public Callback_GotoPoint_atTarget_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GotoPoint_atTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GotoPointPrx proxy = GotoPointPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_atTarget(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 */
template<class T> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_atTarget<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 */
template<class T> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_atTarget<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 * Create a wrapper instance by calling ::RoboCompGotoPoint::newCallback_GotoPoint_atTarget.
 */
template<class T, typename CT>
class Callback_GotoPoint_atTarget : public Callback_GotoPoint_atTarget_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GotoPoint_atTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GotoPointPrx proxy = GotoPointPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_atTarget(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 */
template<class T, typename CT> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_atTarget<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGotoPoint::GotoPoint::begin_atTarget.
 */
template<class T, typename CT> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_atTarget<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
